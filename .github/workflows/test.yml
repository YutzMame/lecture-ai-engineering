name: ML Pipeline CI

on:
  push:
    branches: [ main, master  ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  actions: write

jobs:
  test:
    runs-on: ubuntu-latest
    environment: BASE_ACCURACY # デプロイ先環境を 'development' に固定
    steps:
    - uses: actions/checkout@v3
    - name: Clear environment # テスト的に追加
      run: |
        env -i bash -c "env"
    # ... (セットアップ、依存関係インストールなど)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest great_expectations pandas scikit-learn flake8 black mypy pytest-cov gh
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run model tests
      run: |
        echo "BASELINE_ACCURACY from vars: ${{ vars.BASELINE_ACCURACY }}" # 確認用
        echo "BASELINE_ACCURACY from env: ${{ env.BASELINE_ACCURACY }}"   # 確認用
        python -c "import os; print(f'BASELINE_ACCURACY from os: {os.environ.get(\"BASELINE_ACCURACY\")}')" # 確認用
        pytest day5/演習3/tests/test_model.py -v -s
      env:
        BASELINE_ACCURACY: ${{ vars.BASELINE_ACCURACY }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    
    - name: Lint with flake8
      run: |
        flake8 day5/演習3 --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 day5/演習3 --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        black --check day5/演習3

    - name: Run data tests
      run: |
        pytest day5/演習3/tests/test_data.py -v -s

    - name: Run model tests and get accuracy
      id: model_test
      run: |
        cd day5/演習3/tests
        pytest test_model.py -v -s > output.log
        echo "TEST_OUTPUT<<EOF" >> $GITHUB_OUTPUT
        cat output.log >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        BASELINE_ACCURACY: ${{ vars.BASELINE_ACCURACY }} # 環境変数として定義されている場合

    - name: Update baseline accuracy (if tests passed)
      if: success()
      run: |
        python -c "import os
        import re
        import subprocess

        accuracy_output = os.environ.get('ACCURACY_OUTPUT')
        github_token = os.environ.get('GITHUB_TOKEN')

        if accuracy_output:
          current_accuracy_match = re.search(r'現在のモデルの精度\((\d+\.\d+)\)', accuracy_output)
          if current_accuracy_match:
            current_accuracy = subprocess.run(
                ['awk', '{printf \"%.4f\", $1}'],
                input=current_accuracy_match[1],
                text=True,
                capture_output=True,
                check=True
            ).stdout.strip()
            print(f'Updating BASELINE_ACCURACY to: {current_accuracy}')
            subprocess.run(
                ['gh', 'variable', 'set', 'BASELINE_ACCURACY', current_accuracy],
                env={'GITHUB_TOKEN': github_token},
                check=True
            )
          else:
            print('Could not extract current accuracy from logs.')
            exit(1)
        else:
          print('Error: ACCURACY_OUTPUT environment variable not set.')
          exit(1)"
      env:
        ACCURACY_OUTPUT: ${{ steps.model_test.outputs.stdout }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}